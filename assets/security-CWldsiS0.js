import{p as e}from"./security-COJDRNUs.js";const a={EMAIL:/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,PHONE:/^[6-9]\d{9}$/,NAME:/^[a-zA-Z\s]{2,50}$/,CITY:/^[a-zA-Z\s]{2,30}$/,DISEASE:/^[a-zA-Z0-9\s\-.,]{2,100}$/,AGE:/^(?:[1-9]|[1-9][0-9]|1[0-2][0-9])$/},r=a=>"undefined"!=typeof window?e.sanitize(a):a.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,""),t=(e,t,s)=>{if(!e||"string"!=typeof e)return{isValid:!1,error:`${s} is required`};const i=e.trim();if(0===i.length)return{isValid:!1,error:`${s} cannot be empty`};const n={name:50,email:100,phone:10,city:30,disease:100,message:500,age:3};if(i.length>n[t])return{isValid:!1,error:`${s} must be less than ${n[t]} characters`};if(a[t.toUpperCase()]){if(!a[t.toUpperCase()].test(i)){let e=`Invalid ${s} format`;switch(t.toLowerCase()){case"phone":e="Phone number must be 10 digits starting with 6-9";break;case"name":e="Name must contain only letters and spaces (2-50 characters)";break;case"age":e="Age must be between 1 and 129 years";break;case"city":e="City must contain only letters and spaces (2-30 characters)";break;case"disease":e="Disease description must be 2-100 characters";break;case"email":e="Please enter a valid email address"}return{isValid:!1,error:e}}}return{isValid:!0,value:r(i)}},s=(e,a=[])=>{const s={},i={};for(const r of a)e[r]&&""!==e[r].toString().trim()||(s[r]=`${r.charAt(0).toUpperCase()+r.slice(1)} is required`);return Object.keys(e).forEach(a=>{const n=e[a];if(!n||""===n.toString().trim())return;let o;switch(a.toLowerCase()){case"name":case"fullname":o=t(n,"name","Name");break;case"phone":case"mobile":o=t(n,"phone","Phone");break;case"age":o=((e,a="Age")=>{if(!e)return{isValid:!1,error:`${a} is required`};const r=parseInt(e,10);return isNaN(r)?{isValid:!1,error:`${a} must be a valid number`}:r<1||r>129?{isValid:!1,error:`${a} must be between 1 and 129 years`}:{isValid:!0,value:r}})(n,"Age");break;case"city":o=t(n,"city","City");break;case"disease":o=t(n,"disease","Disease");break;case"email":o=t(n,"email","Email");break;default:o={isValid:!0,value:r(n.toString())}}o.isValid?i[a]=o.value:s[a]=o.error}),{errors:s,validatedData:i}},i=()=>{const e={"Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"},a=(()=>{const e=document.querySelector('meta[name="csrf-token"]');return e?e.getAttribute("content"):null})();return a&&(e["X-CSRF-Token"]=a),e};export{i as g,s as v};
